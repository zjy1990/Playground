from numpy import *import matplotlib.pyplot as pltdef CNFD_amer_dx(currPrice,div = 0.0):    N = 100    K = 10    r = 0.04    sd = 0.2    dt = 0.005    T = 1    M = int64(ceil(T / dt))    X = log(currPrice)    # define dX    dX1 = 0.01    # dX1 method    Pu = -0.25 * dt * ((sd ** 2 / dX1 ** 2) + (r - div - .5 * sd ** 2) / dX1)    Pm = 1 + dt / 2 * (sd ** 2 / dX1 ** 2) + r * dt / 2    Pd = -0.25 * dt * ((sd ** 2 / dX1 ** 2) - (r - div - .5 * sd ** 2) / dX1)    A = zeros((2 * N + 1, 2 * N + 1))  # define A    A[0, 0:2] = [1, -1]    A[2 * N, 2 * N - 1:2 * N + 1] = [1, -1]    AA = zeros((2 * N + 1, 2 * N + 1))    for i in range(1, 2 * N):        A[i, (i - 1):(i + 2)] = [Pu, Pm, Pd]        AA[i, (i - 1):(i + 2)] = [-Pu, -Pm + 2, -Pd]  # fake A for computing Z    # define S, for constat dX    S = zeros(2 * N + 1)    S = exp(X + dX1 * arange(int64(N), int64(-N - 1), -1))    F = zeros((2 * N + 1, 1))    F[:, 0] = maximum((S - K), 0)  # termnial payoff    ExVcall = F.copy()    for i in range(1, M + 1, 1):  # iteration        B = matmul(AA, F)  # define B        B[2 * N,0] = 0        B[0,0]  = S[0] - S[1]        F = matmul(linalg.inv(A), B)        F = maximum(F,ExVcall)    call = F[N][0]    # delta = (F[0:2*N-1] - F[2:2*N+1]) / (S[0:2*N-1] - S[2:2*N+1]).reshape([2*N-1,1])    # plt.plot(S[1:2*N],delta)    # plt.savefig('fig/{}_{}.png'.format(currPrice,div))\    delta =  (F[N+1] - F[N-1])/(S[N+1] - S[N-1])    return deltadef CNFD_amer_ds(currPrice,div):    K = 10    r = 0.04    sd = 0.2    dt = 0.01    T = 1    M = int(ceil(T / dt))    dS1 = 0.1    # dS1    N1 = int(ceil(20 / dS1))    S = multiply(dS1, range(N1, -1, -1))    A = zeros((N1 + 1, N1 + 1))  # define A    AA = zeros((N1 + 1, N1 + 1))  # fake A to define Z later    r = r - div    for i in range(1, N1):        j = N1 - i        Pu = -dt * (r * j / 4 + (sd * j) ** 2 / 4)        Pm = 1 + dt / 2 * ((sd * j) ** 2 + r)        Pd = dt * (r * j / 4 - (sd * j) ** 2 / 4)        A[i, (i - 1):(i + 2)] = [Pu, Pm, Pd]        AA[i, (i - 1):(i + 2)] = [-Pu, -Pm + 2, -Pd]    A[0, 0:2] = [1, -1]    A[N1, N1 - 1:N1 + 1] = [1, -1]    # call    Fcall = zeros((N1 + 1, 1))    Fcall[:, 0] = maximum((S - K), 0)  # termnial payoff    ExVcall = Fcall    for i in range(1, M + 1, 1):  # iteration        Bcall = matmul(AA, Fcall)  # define B        Bcall[N1, 0] = 0        Bcall[0, 0] = S[0] - S[1]        Fcall = matmul(linalg.inv(A), Bcall)        Fcall = maximum(Fcall, ExVcall)    call = Fcall[where(S == currPrice)[0]][0][0]    delta = (Fcall[where(S == currPrice)[0]+1] - Fcall[where(S == currPrice)[0] - 1]) / (S[where(S == currPrice)[0] + 1] - S[where(S == currPrice)[0] - 1])    return delta